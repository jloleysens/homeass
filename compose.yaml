#version: "3.8"

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata01:
    driver: local
  filebeatdata01:
    driver: local
  logstashdata01:
    driver: local
  ollama:
    driver: local
  open-webui:
    driver: local
  nextcloud:
    driver: local
  nextclouddb:
    driver: local

networks:
  default:
    name: home
    external: false

services:
  ## TRAEFIK
  #traefik:
  #  image: traefik:v2.5
  #  container_name: traefik
  #  command:
  #    - "--api.insecure=true"  # Enable the Traefik dashboard (optional)
  #    - "--providers.docker=true"
  #    - "--entrypoints.web.address=:80"
  #    - "--entrypoints.websecure.address=:443"
  #    - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
  #    - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
  #    - "--certificatesresolvers.myresolver.acme.email=jloleysens@noone.com"
  #    - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
  #  ports:
  #    - "8080:8080"
  #  volumes:
  #    - "/var/run/docker.sock:/var/run/docker.sock"
  #    - "./letsencrypt:/letsencrypt"

  ########################### START OF ES STUFF
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
         "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
        '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
  
  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    restart: unless-stopped
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    memswap_limit: ${ES_MEM_SWAP_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  
  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    restart: unless-stopped
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - HASS_URL=http://host.docker.internal:8123
      - HASS_TOKEN=${HASS_TOKEN}
    extra_hosts:
      - "host.docker.internal:host-gateway"
  
  #filebeat01:
  #  container_name: filebeat01
  #  depends_on:
  #    es01:
  #      condition: service_healthy
  #  image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
  #  user: root
  #  volumes:
  #    - certs:/usr/share/filebeat/certs
  #    - filebeatdata01:/usr/share/filebeat/data
  #    - "./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
  #    - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
  #    - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #  restart: unless-stopped
  #  environment:
  #    - ELASTIC_USER=elastic
  #    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #    - ELASTIC_HOSTS=https://es01:9200
  #    - KIBANA_HOSTS=http://kibana:5601
  #    - LOGSTASH_HOSTS=http://logstash01:9600
  #  command:
  #    - --strict.perms=false
  #
  #metricbeat01:
  #  container_name: metricbeat01
  #  depends_on:
  #    es01:
  #      condition: service_healthy
  #    kibana:
  #      condition: service_healthy
  #  image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
  #  user: root
  #  volumes:
  #    - certs:/usr/share/metricbeat/certs
  #    - metricbeatdata01:/usr/share/metricbeat/data
  #    - "./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
  #    - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #    - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
  #    - "/proc:/hostfs/proc:ro"
  #    - "/:/hostfs:ro"
  #  restart: unless-stopped
  #  environment:
  #    - ELASTIC_USER=elastic
  #    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #    - ELASTIC_HOSTS=https://es01:9200
  #    - KIBANA_HOSTS=http://kibana:5601
  #    - LOGSTASH_HOSTS=http://logstash01:9600

  ########################### END OF ES STUFF
  
  #ollama:
  #  container_name: ollama
  #  image: "ollama/ollama:latest"
  #  volumes:
  #    - ollama:/root/.ollama
  #  ports:
  #    - 11434:11434
  #  restart: unless-stopped
  #  pull_policy: always
  #  tty: true
  #  environment:
  #    - OLLAMA_KEEP_ALIVE=24h
  #    - OLLAMA_HOST=0.0.0.0

  #open-webui:
  #  container_name: open-webui
  #  image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
  #  volumes:
  #    - open-webui:/app/backend/data
  #  depends_on:
  #    - ollama
  #  ports:
  #    - ${OPEN_WEBUI_PORT-3000}:8080
  #  environment:
  #    - 'OLLAMA_BASE_URL=http://ollama:11434'
  #  extra_hosts:
  #    - host.docker.internal:host-gateway
  #  restart: unless-stopped

  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - /home/jloleysens/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
        #ports:
        #- ${HASS_PORT}:8123
        #- 5353:5353
        #- 21064:21064
    restart: unless-stopped
    privileged: true
    network_mode: host

  # Next cloud

  nextclouddb:
    mem_limit: 1gb
    container_name: nextclouddb
    image: mariadb:10.6
    restart: always
    command: --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    volumes:
      - nextclouddb:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud

  nextcloudapp:
    mem_limit: 1gb
    container_name: nextcloud
    image: nextcloud
    restart: always
      #labels:
      #  - "traefik.enable=true"
      #  - "traefik.http.routers.myservice.rule=Host(`mahserver1:8080`)"
      #  - "traefik.http.routers.myservice.entrypoints=websecure"
      #  - "traefik.http.routers.myservice.tls.certresolver=myresolver"
    ports:
      - 8080:80
    links:
      - nextclouddb
    volumes:
      - nextcloud:/var/www/html
      - ./nextcloud/config:/var/www/html/config:rw
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=nextclouddb
